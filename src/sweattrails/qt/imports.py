'''
Created on Aug 17, 2014

@author: jan
'''

import os.path
import Queue
import traceback

from PySide.QtCore import QCoreApplication
from PySide.QtCore import QThread
from PySide.QtCore import Signal

import gripe
import grumble.model
import grumble.property
import sweattrails.device.antfs
import sweattrails.device.exceptions
import sweattrails.device.fitparser

logger = gripe.get_logger(__name__)


class LoggingThread(QThread):
    logmessage = Signal(str)
    progressInit = Signal(str)
    progressUpdate = Signal(int)
    progressEnd = Signal()
    
    def __init__(self, *args):
        super(LoggingThread, self).__init__(*args)
        QCoreApplication.instance().aboutToQuit.connect(self.quit)
        
    def quit(self):
        self.stop()
        self.wait()
        
    def stop(self):
        self._stopped = True
        
    def log(self, msg, *args):
        self.logmessage.emit(msg.format(*args))
        
    def progress_init(self, msg, *args):
        self.progressInit.emit(msg.format(*args))
        
    def progress(self, percentage):
        self.progressUpdate.emit(percentage)
        
    def progress_end(self):
        self.progressEnd.emit()
        

class ImportedFITFile(grumble.model.Model):
    filename = grumble.property.StringProperty(is_key = True)
    status = grumble.property.BooleanProperty(default = False) 


class ImportThread(LoggingThread):
    importing = Signal(str)
    imported = Signal(str)
    importerror = Signal(str, str)
    queueEmpty = Signal()
    
    _singleton = None
    
    def __init__(self):
        super(ImportThread, self).__init__()
        self._queue = Queue.Queue()
        
    def addfile(self, filename):
        self._queue.put(filename)
            
    def addfiles(self, filenames):
        for f in filenames:
            self.addfile(f)
            
    def run(self):
        self._stopped = False 
        while not self._stopped:
            self.scan_inbox()
            try:
                while True:
                    f = self._queue.get(True, 1)
                    self.import_file(f)
            except Queue.Empty:
                self.queueEmpty.emit()
            
    def scan_inbox(self):
        # We set up the paths every time since the user could have switched
        # since last time.
        #
        # FIXME - gripe should read from the session, which qt.app.SweatTrails 
        # should manage
        userdir = gripe.user_dir(QCoreApplication.instance().user.uid())
        self.inbox = os.path.join(userdir, "inbox")
        gripe.mkdir(self.inbox)
        self.queue =  os.path.join(userdir, "queue")
        gripe.mkdir(self.queue)
        self.done =  os.path.join(userdir, "done")
        gripe.mkdir(self.done)
        inboxfiles = gripe.listdir(self.inbox)
        for f in inboxfiles:
            gripe.rename(os.path.join(self.inbox, f), os.path.join(self.queue, f))
            self.addfile(os.path.join(gripe.root_dir(), self.queue, f))
            
    def import_file(self, filename):
        self.importing.emit(filename)
        try:
            if filename.endswith(".fit"):
                self.parseFITFile(filename)
            elif filename.endswith(".tcx"):
                self.parseTCXFile(filename)
            else:
                self.parseCSVFile(filename)
            self.imported.emit(filename)
        except sweattrails.device.exceptions.FileImportError as ie:
            traceback.print_exc()
            self.importerror.emit(filename, ie.message)

    def parseFITFile(self, filename):
        f = os.path.basename(filename)
        parser = sweattrails.device.fitparser.FITParser(
            QCoreApplication.instance().user, filename, self)
        athlete = QCoreApplication.instance().user
        with gripe.db.Tx.begin():
            q = ImportedFITFile.query('"filename" =', f, parent = athlete)
            fitfile = q.get()
            if not fitfile:
                fitfile = ImportedFITFile(parent = athlete)
                fitfile.filename = f
                fitfile.status = False
                fitfile.put()
        try:
            parser.parse()
        except sweattrails.device.exceptions.SessionExistsError as se:
            # Ignore if the file was generated by the ANT download.
            # Otherwise complain. 
            if "-st-antfs" not in filename:
                raise
            
        # Move file to 'done' directory if it was in the queue before: 
        if os.path.basename(os.path.dirname(filename)) == "queue":
            gripe.rename(os.path.join(self.queue, f), os.path.join(self.done, f))
        # Set file to completed in the log:
        with gripe.db.Tx.begin():
            fitfile.status = True
            fitfile.put()
                
    def parseTCXFile(self, filename):
        pass

    def parseCSVFile(self, filename):
        pass

    @classmethod
    def get_thread(cls):
        if not cls._singleton:
            cls._singleton = ImportThread()
        return cls._singleton
    
    
class DownloadThread(LoggingThread, sweattrails.device.antfs.GripeConfigBridge):    
    def __init__(self):
        super(DownloadThread, self).__init__()
        self.init_config()
        
    def start(self):
        self.garminbridge = sweattrails.device.antfs.GarminBridge(self)
        super(DownloadThread, self).start()
        
    def run(self):
        try:
            self.athlete = QCoreApplication.instance().user
            self.garminbridge.start()
        except:
            traceback.print_exc()
            raise


    #===========================================================================
    # C O N F I G  B R I D G E            
    #===========================================================================
    
    def exists(self, antfile):
        if antfile.get_date().year < 2000:
            return True
        with gripe.db.Tx.begin():
            q = ImportedFITFile.query(ancestor = self.athlete)
            q.add_filter("filename", "=", self.get_filename(antfile))
            q.add_filter("status", "=", True)
            return q.get() is not None
    
    def process(self, antfile, data):
        with gripe.db.Tx.begin():
            path = os.path.join(gripe.root_dir(), 
                                gripe.user_dir(self.athlete.uid()), 
                                "inbox",
                                self.get_filename(antfile))
            with open(path, "w") as fd:
                data.tofile(fd)
            fitfile = ImportedFITFile(parent = self.athlete)
            fitfile.filename = self.get_filename(antfile)
            fitfile.status = False
            fitfile.put()
    
    def get_filename(self, antfile):
        return str.format("{0}-{1:02x}-{2}-st-antfs.fit",
                antfile.get_date().strftime("%Y-%m-%d_%H-%M-%S"),
                antfile.get_type(), antfile.get_size())

