#
# Copyright (c) 2014 Jan de Visser (jan@sweattrails.com)
#
# This program is free software; you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation; either version 2 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT
# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc., 51
# Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
#

import os.path
import threading

from PyQt5.QtCore import QCoreApplication
from PyQt5.QtCore import pyqtSignal

from PyQt5.QtWidgets import QCheckBox
from PyQt5.QtWidgets import QDialog
from PyQt5.QtWidgets import QDialogButtonBox
from PyQt5.QtWidgets import QTableWidget
from PyQt5.QtWidgets import QTableWidgetItem
from PyQt5.QtWidgets import QVBoxLayout

import gripe
import gripe.db
import grumble.model
import grumble.property
import sweattrails.device
import sweattrails.device.antfs
import sweattrails.device.exceptions
import sweattrails.device.parser
import sweattrails.qt.async.bg
import sweattrails.qt.async.job

logger = gripe.get_logger(__name__)


class ImportedFITFile(grumble.model.Model):
    filename = grumble.property.StringProperty(is_key=True)
    status = grumble.property.BooleanProperty(default=False)


class ImportFile(sweattrails.qt.async.job.Job):
    def __init__(self, filename):
        super(ImportFile, self).__init__()
        self.filename = filename
        userdir = gripe.user_dir(self.user.uid())
        self.inbox = os.path.join(userdir, "inbox")
        self.queue = os.path.join(userdir, "queue")
        self.done = os.path.join(userdir, "done")

    def __str__(self):
        return "Importing file %s" % self.filename

    def handle(self):
        logger.debug("ImportFile: Importing file %s", self.filename)
        f = os.path.basename(self.filename)
        parser = sweattrails.device.get_parser(self.filename)
        if not parser:
            logger.warning("No parser registered for %s", f)
            return
        parser.set_athlete(self.user)
        parser.set_logger(self.thread)
        q = ImportedFITFile.query('"filename" =', f, parent=self.user)
        fitfile = q.get()
        if not fitfile:
            fitfile = ImportedFITFile(parent=self.user)
            fitfile.filename = f
            fitfile.status = False
            fitfile.put()
        try:
            parser.parse()
        except sweattrails.device.exceptions.SessionExistsError:
            # Ignore if the file was generated by the ANT download.
            # Otherwise complain.
            if "-st-antfs" not in self.filename:
                raise

        # Move file to 'done' directory if it was in the queue before:
        if os.path.basename(os.path.dirname(self.filename)) == "queue":
            print "rename: ", os.path.join(self.queue, f), os.path.join(self.done, f)
            gripe.rename(os.path.join(self.queue, f), os.path.join(self.done, f))
        else:
            print "Not in queue: ", f

        # Set file to completed in the log:
        with gripe.db.Tx.begin():
            fitfile.status = True
            fitfile.put()


class ScanInbox(sweattrails.qt.async.bg.ThreadPlugin):
    def __init__(self, thread):
        super(ScanInbox, self).__init__(thread)
        self.user = None
        self._setuser()
        
    def addfile(self, filename):
        self.addjob(ImportFile(filename))
            
    def addfiles(self, filenames):
        for f in filenames:
            self.addfile(f)
            
    def _setuser(self):
        # FIXME - gripe should read from the session, which qt.app.SweatTrails 
        # should manage
        user = QCoreApplication.instance().user
        if user != self.user:
            self.user = user
            userdir = gripe.user_dir(user.uid())
            self.inbox = os.path.join(userdir, "inbox")
            gripe.mkdir(self.inbox)
            self.queue = os.path.join(userdir, "queue")
            gripe.mkdir(self.queue)
            self.done = os.path.join(userdir, "done")
            gripe.mkdir(self.done)
            
    def run(self):
        # We set up the paths every time since the user could have switched
        # since last time.
        self._setuser()
        if self.user:
            inboxfiles = gripe.listdir(self.inbox)
            for f in inboxfiles:
                logger.debug("ScanInbox: Found file %s", f)
                gripe.rename(os.path.join(self.inbox, f), os.path.join(self.queue, f))
                self.addfile(os.path.join(gripe.root_dir(), self.queue, f))


class SelectActivities(QDialog):
    select = pyqtSignal()

    def __init__(self, parent = None):
        super(SelectActivities, self).__init__(parent)
        layout = QVBoxLayout(self)
        self.table = QTableWidget(parent)
        self.table.setColumnCount(3)
        self.table.setHorizontalHeaderLabels(["", "Date", "Size"])
        self.table.setColumnWidth(0, 25)
        self.table.setColumnWidth(1, 100)
        self.table.setColumnWidth(3, 80)
        layout.addWidget(self.table)
        self.buttonbox = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        self.buttonbox.accepted.connect(self.accept)
        self.buttonbox.rejected.connect(self.reject)
        self.select.connect(self._select)
        layout.addWidget(self.buttonbox)
        self.setMinimumSize(320, 200)
        
    def selectActivities(self, antfiles):
        logger.debug("SelectActivities.selectActivities")
        self.antfiles = antfiles
        self.lock = threading.Condition()
        self.lock.acquire()
        self.select.emit()
        logger.debug("SelectActivities.selectActivities: signal emitted")
        self.lock.wait()
        self.lock.release()
        logger.debug("SelectActivities.selectActivities: returning %s selected activities", len(self._selected))
        return self._selected

    def _select(self):
        logger.debug("SelectActivities._select")
        self.table.clear()
        self.table.setRowCount(len(self.antfiles))
        for row in range(len(self.antfiles)):
            f = self.antfiles[row]
            self.table.setCellWidget(row, 0, QCheckBox(self))
            self.table.setItem(row, 1,
                QTableWidgetItem(f.get_date().strftime("%d %b %Y %H:%M")))
            self.table.setItem(row, 2,
                QTableWidgetItem("{:d}".format(f.get_size())))
        result = self.exec_()
        self._selected = []
        if result == QDialog.Accepted:
            for i in range(len(self.antfiles)):
                f = self.antfiles[i]
                cb = self.table.cellWidget(i, 0)
                if cb.isChecked():
                    self._selected.append(f)
        self.lock.acquire()
        logger.debug("SelectActivities._select: lock acquired")
        self.lock.notify()
        self.lock.release()


class DownloadJob(sweattrails.qt.async.job.Job):
    def __init__(self, manager):
        super(DownloadJob, self).__init__()
        self.manager = manager

    def __str__(self):
        return "Garmin download"

    def handle(self):
        logger.debug("Garmin download")
        with sweattrails.device.antfs.GarminBridge.acquire(self) as gb:
            gb.on_transport()

    # ========================================================================
    # C O N F I G  B R I D G E            
    # ========================================================================
    
    def exists(self, antfile):
        if antfile.get_date().year < 2000:
            return True
        with gripe.db.Tx.begin():
            q = ImportedFITFile.query(ancestor=self.user)
            q.add_filter("filename", "=", self.get_filename(antfile))
            q.add_filter("status", "=", True)
            return q.get() is not None
        
    def select(self, antfiles):
        logger.debug("DownloadThread.select: %s files available", len(antfiles))
        selected = self.manager.selectActivities(antfiles)
        logger.debug("DownloadThread.select: %s files selected", len(selected))
        return selected

    def process(self, antfile, data):
        with gripe.db.Tx.begin():
            path = os.path.join(gripe.root_dir(), 
                                gripe.user_dir(self.user.uid()), 
                                "inbox",
                                self.get_filename(antfile))
            with open(path, "w") as fd:
                data.tofile(fd)
            f = self.get_filename(antfile)
            q = ImportedFITFile.query('"filename" =', f, parent=self.user)
            fitfile = q.get()
            if not fitfile:
                fitfile = ImportedFITFile(parent=self.user)
                fitfile.filename = f
            fitfile.status = False
            fitfile.put()

    def get_filename(self, antfile):
        return str.format("{0}-{1:02x}-{2}-st-antfs.fit",
                          antfile.get_date().strftime("%Y-%m-%d_%H-%M-%S"),
                          antfile.get_type(), antfile.get_size())
